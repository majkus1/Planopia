// require('dotenv').config()
// const express = require('express')
// const bcrypt = require('bcryptjs')
// const jwt = require('jsonwebtoken')
// const User = require('../models/user')
// const Log = require('../models/log')
// const auth = require('../middleware/authMiddleware')
// const Workday = require('../models/Workday')
// const LeaveRequest = require('../models/LeaveRequest')
// const CalendarConfirmation = require('../models/CalendarConfirmation')
// const LeavePlan = require('../models/LeavePlan')
// const router = express.Router()
// const nodemailer = require('nodemailer')
// const { appUrl } = require('../config')
// const rateLimit = require('express-rate-limit')


const express = require('express')
const router = express.Router()
const userController = require('../controllers/userController')
const auth = require('../middleware/authMiddleware')
const authController = require('../controllers/authController')
const { resetPasswordLimiter } = require('../utils/rateLimiters')
const { loginLimiter } = require('../utils/rateLimiters')

router.post('/login', loginLimiter, authController.login)
router.post('/refresh-token', authController.refreshToken)
router.get('/me', auth, authController.getMe)
router.post('/logout', authController.logout)
router.post('/change-password', auth, authController.changePassword)
router.post('/reset-password-request', resetPasswordLimiter, authController.resetPasswordRequest)

router.post('/register', auth, userController.register)
router.post('/set-password', userController.setPassword)
router.post('/new-password', userController.resetPassword)
router.put('/update-position', auth, userController.updatePosition)
router.get('/profile', auth, userController.getUserProfile)
router.get('/users', auth, userController.getAllUsers)
router.get('/all-users', auth, userController.getAllVisibleUsers)
router.get('/alluserplans', auth, userController.getAllUserPlans)
router.get('/:userId', auth, userController.getUserById)
router.patch('/:userId/roles', auth, userController.updateUserRoles)
router.delete('/:userId', auth, userController.deleteUser)

module.exports = router
